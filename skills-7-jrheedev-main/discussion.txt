1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

   Answer: C

   Python lists are helpful because it's a data structure that can be looped over and 
   can retrieve items at a given location. However, in this instance, a doubly linked list
   might be most efficient because it can handle appending and removing from both the 
   beginning and ending of the data structure with using head and tail nodes and is superior
   in speed and scalability.



2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

  Answer: D

  Dictionary can be a type of data structure that might fit but Binary Search Tree would
  produce faster results with larger data sets. In addition, Binary Search tree would use
  less memory. 


3. Explain why looking up, adding elements, and removing elements from a
   dictionary or hash map are all O(1) operations.
   O(1) operations are defined by having a constant runtime. Dictionary or hash map point to an unique array position but items do not shift over when adding or removing eleemtns. 

4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.
   O(n) operations are defined by having a linear runtime. Python lists point to a specific array position and all items shift over when adding or removing elements.


5. What is the runtime for Bubble Sort?
   O(n^2) - Quadratic Time

6. What is the runtime for Quick Sort?
   0(n log n)

7. What is the runtime for Merge Sort?
   O(n log n) - Linearithmic Time

8. What is the runtime for Insertion Sort?
   O(n^2) - Quadratic Time

9.  What is the difference between a tree and a graph?
   Graphs are contain loops/cycles and can be non-directed 


Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
10. When this function is initially called, what are the values of:

    - lst - [8, 4, 1, 6, 5, 2, 7, 3]

    - pivot - 5

    - lo - [4, 1, 2, 3]

    - hi - [8, 6, 7]

11. When the quicksort is first called recursively on the `lo` list, what are the values of:

  - lst - [4, 1, 2, 3]

  - pivot - 2

  - lo - [1]

  - hi - [3, 4]
